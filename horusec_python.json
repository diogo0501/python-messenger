{
  "issues": [
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "CRITICAL",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/2) * Possible vulnerability detected: A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.\n         \n(2/2) * Possible vulnerability detected: Possible binding to all interfaces.",
        "filePath": "app/app.py",
        "textRange": {
          "startLine": 38,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Trivy",
      "engineId": "horusec",
      "severity": "CRITICAL",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: MissConfiguration\n      Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n      Message: Specify at least 1 USER command in Dockerfile with non-root user as argument\n      Resolution: Add 'USER \u003cnon root user name\u003e' line to the Dockerfile\n      References: [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ https://avd.aquasec.com/appshield/ds002]",
        "filePath": "Dockerfile",
        "textRange": {
          "startLine": 1,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "MAJOR",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: Possible SQL injection vector through string-based query construction.",
        "filePath": "app/db_access.py",
        "textRange": {
          "startLine": 13,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "MAJOR",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: Possible SQL injection vector through string-based query construction.",
        "filePath": "app/db_access.py",
        "textRange": {
          "startLine": 35,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "MAJOR",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: Possible SQL injection vector through string-based query construction.",
        "filePath": "app/db_access.py",
        "textRange": {
          "startLine": 51,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "MAJOR",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: Possible SQL injection vector through string-based query construction.",
        "filePath": "app/db_access.py",
        "textRange": {
          "startLine": 64,
          "startColumn": 1
        }
      }
    },
    {
      "type": "VULNERABILITY",
      "ruleId": "Bandit",
      "engineId": "horusec",
      "severity": "MAJOR",
      "effortMinutes": 0,
      "primaryLocation": {
        "message": "(1/1) * Possible vulnerability detected: Possible SQL injection vector through string-based query construction.",
        "filePath": "app/db_access.py",
        "textRange": {
          "startLine": 82,
          "startColumn": 1
        }
      }
    }
  ]
}