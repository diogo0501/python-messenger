Feed;Column1;_1;_2;_3;_4;_5;_6;Column2
;Aplicacao;Vulnerabilidades;Description;Other Info;Solucao;Risk;Tool;
1;xvj12;PII Disclosure;The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.;"Credit Card Type detected: Maestro; Bank Identification Number: 500544; Brand: MAESTRO";Check the response for the potential presence of personally identifiable information (PII), ensure nothing sensitive is leaked by the application.;High;Zap;
;;Absence of Anti-CSRF Tokens;"No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim.";"No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: ""formSubmitBtn"" ""password"" ""username"" ].";"Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.";Medium;Zap;
;;Content Security Policy (CSP) Header Not Set;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.;;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.;Medium;Zap;
;;"Server Leaks Version Information via ""Server"" HTTP Response Header Field";"The web/application server is leaking version information via the ""Server"" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.";;"Ensure that your web server, application server, load balancer, etc. is configured to suppress the ""Server"" header or provide generic details.";Low;Zap;
;;Timestamp Disclosure - Unix;A timestamp was disclosed by the application/web server - Unix;1633867200, which evaluates to: 2021-10-10 13:00:00;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.;Low;Zap;
;;X-Content-Type-Options Header Missing;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.;"This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At ""High"" threshold this scan rule will not alert on client or server error responses.";Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.;Low;Zap;
;;Re-examine Cache-control Directives;The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.;;"For secure content, ensure the cache-control HTTP header is set with ""no-cache, no-store, must-revalidate"". If an asset should be cached consider setting the directives ""public, max-age, immutable"".";Informational;Zap;
;;Retrieved from Cache;The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment.;The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.;"Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:
Cache-Control: no-cache, no-store, must-revalidate, private";Informational;Zap;
;; Usage of hard-coded secret;Storing secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.;;;Critical;Beaeer Cli;
;;Unsanitized input in SQL query;Using unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks.;;;Critical;Beaeer Cli;
;;Unsanitized user input in format string;Including user input directly in a format string can lead to security vulnerabilities. This issue arises when an attacker manipulates the format specifiers in the user input, resulting in misleading or fabricated messages.;;;High;Beaeer Cli;
;;Usage of default session cookie configuration;Using default session cookie configurations can expose your application to security vulnerabilities. This vulnerability arises when session cookie are set with their default values, making them predictable and easier to exploit.;;;Medium;Beaeer Cli;
;;Missing Helmet configuration on HTTP headers;Helmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.;;;Medium;Beaeer Cli;
;;Missing server configuration to reduce server fingerprinting;Reducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version.;;;Medium ;Beaeer Cli;
;;Usage of session on static asset;Enabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks.;;;Medium;Beaeer Cli;
;;Leakage of sensitive information in logger message ;Sensitive information leakage through logger messages can compromise user privacy and security.;;;Medium;Beaeer Cli;
;;Leakage of information in logger message;Information leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.;;;Low;Beaeer Cli;
2;abc21;SQL Injection;SQL injection may be possible;;;High;Zap;
;;SQL Injection - SQLite;SQL injection may be possible;;;High;Zap;
;;Content Security Policy (CSP) Header Not Set;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page ï¿½ covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.;;;Medium;Zap;
;;Missing Anti-clickjacking Header;The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.;;;Medium;Zap;
;;Cross-Domain Misconfiguration;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server;;;Medium;Zap;
;;Cookie without SameSite Attribute;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.;;;Low;Zap;
;;"Server Leaks Version Information via ""Server"" HTTP Response Header Field";"The web/application server is leaking version information via the ""Server"" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.";;;Low;Zap;
;;X-Content-Type-Options Header Missing;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.;;;Low;Zap;
;;flask_debug_true;A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.;;;High;Bandit;
;;hardcoded_bind_all_interfaces;Possible binding to all interfaces.;;;Medium;Bandit;
;;hardcoded_sql_expressions;Possible SQL injection vector through string-based query construction.;;;Medium;Bandit;
3;ssj13;Information Exposure Through An Error Message;The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks.;;;High;Horusec;
;;SQL Injection;The input values included in SQL queries need to be passed in safely. Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection. Alternatively to prepare statements, each parameter can be escaped manually.;;;High;Horusec;
;;SQL Injection With Turbine;The input values included in SQL queries need to be passed in safely. Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection. Turbine API provide a DSL to build query with  code. Alternatively to prepare statements, each parameter can be escaped manually. ;;;High;Horusec;
;;SQL Injection JDBC;The input values included in SQL queries need to be passed in safely. Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.;;;High;Horusec;
;;TCP Server Socket;TCP Server Socket;;;Low;Horusec;
;;TCP Socket;TCP Socket;;;Low;Horusec;
4;vuln_wa (i2); Unsanitized user input in OS command;Executing OS commands that include user-supplied data can lead to command injection vulnerabilities.;;;Critical;Beaeer Cli;
;;Unsanitized external input in SQL query;Using unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks.;;;Critical;Beaeer Cli;
;;Unsanitized user input in raw HTML strings (XSS);Including unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.;;;High;Beaeer Cli;
;;Unsanitized user input in 'echo' function (XSS);Including unsanitized user input in responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.;;;High;Beaeer Cli;
;; Unsanitized user input in code generation;Unsanitized user input in code generation can lead to code injection vulnerabilities. This occurs when an application dynamically generates or manipulates code using data provided by the user without proper sanitization.;;;High;Beaeer Cli;
;;Leakage of sensitive information with 'phpinfo' function;The use of the 'phpinfo()' function can lead to the leakage of sensitive information. This function outputs a large amount of information about the current state of PHP, including environment variables, server information, and PHP configuration settings, which could be exploited by unauthorized individuals.;;;Medium;Beaeer Cli;
;;Directory Browsing;It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.;;Disable directory browsing.  If this is required, make sure the listed files does not induce risks.;Medium;Zap;
;;GET for POST;A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.;;Ensure that only POST is accepted where POST is expected.;Informational;Zap;
;;User Agent Fuzzer;Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.;;;Informational;Zap;
